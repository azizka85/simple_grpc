// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/timing.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimingClient is the client API for Timing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimingClient interface {
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (Timing_CallClient, error)
}

type timingClient struct {
	cc grpc.ClientConnInterface
}

func NewTimingClient(cc grpc.ClientConnInterface) TimingClient {
	return &timingClient{cc}
}

func (c *timingClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (Timing_CallClient, error) {
	stream, err := c.cc.NewStream(ctx, &Timing_ServiceDesc.Streams[0], "/Services.Timing/Call", opts...)
	if err != nil {
		return nil, err
	}
	x := &timingCallClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Timing_CallClient interface {
	Recv() (*CallResponse, error)
	grpc.ClientStream
}

type timingCallClient struct {
	grpc.ClientStream
}

func (x *timingCallClient) Recv() (*CallResponse, error) {
	m := new(CallResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimingServer is the server API for Timing service.
// All implementations must embed UnimplementedTimingServer
// for forward compatibility
type TimingServer interface {
	Call(*CallRequest, Timing_CallServer) error
	mustEmbedUnimplementedTimingServer()
}

// UnimplementedTimingServer must be embedded to have forward compatible implementations.
type UnimplementedTimingServer struct {
}

func (UnimplementedTimingServer) Call(*CallRequest, Timing_CallServer) error {
	return status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedTimingServer) mustEmbedUnimplementedTimingServer() {}

// UnsafeTimingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimingServer will
// result in compilation errors.
type UnsafeTimingServer interface {
	mustEmbedUnimplementedTimingServer()
}

func RegisterTimingServer(s grpc.ServiceRegistrar, srv TimingServer) {
	s.RegisterService(&Timing_ServiceDesc, srv)
}

func _Timing_Call_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CallRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimingServer).Call(m, &timingCallServer{stream})
}

type Timing_CallServer interface {
	Send(*CallResponse) error
	grpc.ServerStream
}

type timingCallServer struct {
	grpc.ServerStream
}

func (x *timingCallServer) Send(m *CallResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Timing_ServiceDesc is the grpc.ServiceDesc for Timing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Timing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Services.Timing",
	HandlerType: (*TimingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Call",
			Handler:       _Timing_Call_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/timing.proto",
}
