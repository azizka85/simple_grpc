// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "greet.proto" (package "Services", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Greet } from "./greet";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetResponse } from "./greet";
import type { GetRequest } from "./greet";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Services.Greet
 */
export interface IGreetClient {
    /**
     * @generated from protobuf rpc: Get(Services.GetRequest) returns (Services.GetResponse);
     */
    get(input: GetRequest, options?: RpcOptions): UnaryCall<GetRequest, GetResponse>;
}
/**
 * @generated from protobuf service Services.Greet
 */
export class GreetClient implements IGreetClient, ServiceInfo {
    typeName = Greet.typeName;
    methods = Greet.methods;
    options = Greet.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Get(Services.GetRequest) returns (Services.GetResponse);
     */
    get(input: GetRequest, options?: RpcOptions): UnaryCall<GetRequest, GetResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRequest, GetResponse>("unary", this._transport, method, opt, input);
    }
}
