// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "timing.proto" (package "Services", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Timing } from "./timing";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CallResponse } from "./timing";
import type { CallRequest } from "./timing";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Services.Timing
 */
export interface ITimingClient {
    /**
     * @generated from protobuf rpc: Call(Services.CallRequest) returns (stream Services.CallResponse);
     */
    call(input: CallRequest, options?: RpcOptions): ServerStreamingCall<CallRequest, CallResponse>;
}
/**
 * @generated from protobuf service Services.Timing
 */
export class TimingClient implements ITimingClient, ServiceInfo {
    typeName = Timing.typeName;
    methods = Timing.methods;
    options = Timing.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Call(Services.CallRequest) returns (stream Services.CallResponse);
     */
    call(input: CallRequest, options?: RpcOptions): ServerStreamingCall<CallRequest, CallResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CallRequest, CallResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
